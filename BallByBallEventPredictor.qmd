---
jupyter: python3
---

---
title: "Project Step II"
subtitle: "Group 11 - Ball by Ball Event Predictor"
date: 10/17/2023
date-modified: last-modified
date-format: long
format:
  html:
    theme: [cosmo, theme.scss]
    toc: true
    embed-resources: true
    number-sections: true
author:
  - name: Tegveer Ghura
    affiliations:
      - id: gu
        name: Georgetown University
        city: Washington
        state: DC
---

# Data Preparation 

## Import the necessary libraries

```{python}
import random
random.seed(1310)
from seaborn.palettes import color_palette
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.preprocessing import LabelEncoder
import re
import numpy as np
import plotly.express as px
import plotly.io as pio
#pio.renderers.default = "notebook"
pio.renderers.default = "plotly_mimetype+notebook_connected"
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.exceptions import ConvergenceWarning
from sklearn.exceptions import DataConversionWarning
ConvergenceWarning('ignore')
DataConversionWarning('ignore')
from sklearn.model_selection import cross_val_score, RepeatedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import GradientBoostingClassifier, BaggingClassifier, RandomForestClassifier, StackingClassifier, AdaBoostClassifier
from xgboost import XGBClassifier
from catboost import CatBoostClassifier
import pickle
import joblib
import json
import sys
import os
import shutil
import warnings
```

# Load the dataset and display the dataframe 

```{python}
df = pd.read_csv('data/raw/deliveries.csv', encoding = "ISO-8859-1", na_filter=False)
```

```{python}
df.head()
```

```{python}
df.tail()
```

```{python}
df.shape
```

```{python}
df.columns
```

## Check for Missing Values/NAs

```{python}
df.isna().sum()
```

## Remove Unnecessary Columns

```{python}
#| scrolled: true
columns_to_remove = ['player_dismissed', 'fielder', 'penalty_runs']
df.drop(labels=columns_to_remove, axis=1, inplace=True)
```

```{python}
df.head()
```

## Feature Engineering Bowler Type

In the code cell below, we have created a custom list of all spin bowlers for each team. We have then modified the `bowler` column in the dataframe which will be used to identify the type of bowler, either "spinner" or "pacer". Therefore, instead of dropping the `bowler` column, we have created a new column `bowler_type` which will be used for our analysis and enhance the predictive power of our models.

```{python}
# Replacing all spinner names with 'spinner' and all pacer names with 'pacer' under `bowler` column

rcb_spin = ['SB Joshi', 'KP Appanna', 'A Kumble', 'J Arunkumar', 'Abdur Razzak', 'CL White', 'TM Dilshan',
            'KP Pietersen', 'RE van der Merwe', 'S Sriram', 'DL Vettori', 'KB Arun Karthik', 'CH Gayle', 'S Sriram',
            'AA Kazi', 'R Ninan', 'J Syed Mohammad', 'M Muralitharan', 'M Kartik', 'P R Barman', 'Sachin Baby',
            'YS Chahal', 'Yuvraj Singh', 'SB Jakati', 'Iqbal Abdulla', 'T Shamsi', 'Parvez Rasool',
            'S Baby', 'TM Head', 'KM Jadhav', 'P Negi', 'S Badree', 'Washington Sundar', 'M Ali', 'M Ashwin']

mi_spin = ['A Dananjaya', 'AG Murtaza', 'A Roy', 'GJ Maxwell', 'Harbhajan Singh', 'J Suchith', 'J Yadav',
           'JP Duminy', 'KH Pandya', 'KV Sharma', 'M Markande', 'N Rana', 'PP Ojha', 'RD Chahar', 'RG Sharma',
           'RJ Peterson', 'RW Price', 'S Gopal', 'SD Chitnis', 'ST Jayasuriya', 'TL Suman', 'VS Yeligati']

kkr_spin = ['BAW Mendis','BJ Hodge', 'DJ Hussey', 'GB Hogg', 'J Botha', 'KC Cariappa', 'M Kartik', 'CH Gayle',
            'Iqbal Abdulla', 'Kuldeep Yadav', 'MB Parmar', 'MK Tiwary', 'Mohammad Hafeez', 'N Rana',
            'PP Chawla', 'RS Gavaskar', 'S Ladda', 'Shakib Al Hasan', 'SMSM Senanayake', 'SP Narine', 'YK Pathan']

csk_spin = ['DJ Hussey', 'F du Plessis', 'Harbhajan Singh', 'Imran Tahir', 'RA Jadeja', 'KV Sharma', 'M Santner',
            'M Muralitharan', 'P Negi', 'R Ashwin', 'S Badree', 'S Randiv', 'S Vidyut', 'SB Jakati', 'SK Raina',
            'SMSM Senanayake']

dc_spin = ['A Mishra', 'AA Jhunjhunwala', 'Ankit Sharma', 'CL White', 'PP Ojha', 'DB Ravi Teja', 'JP Duminy',
           'LPC Silva', 'R Sharma', 'RG Sharma', 'S Dhawan', 'Shahid Afridi', 'TL Suman', 'Y Venugopal Rao']

dd_spin = ['A Mishra', 'AJ Finch', 'AR Patel', 'BMAJ Mendis', 'DL Vettori', 'GJ Maxwell', 'H Vihari', 'Imran Tahir',
           'J Suchith', 'J Botha', 'J Yadav', 'JP Duminy', 'KP Pietersen', 'MK Tiwary', 'P Negi', 'R Sharma',
           'R Tewatia', 'RE van der Merwe', 'S Ladda', 'S Lamichhane', 'S Nadeem', 'S Sriram', 'Shoaib Malik',
           'TM Dilshan', 'Sunny Gupta', 'V Sehwag', 'Y Venugopal Rao', 'Yuvraj Singh', 'Y Nagar']

srh_spin = ['A Mishra', 'Ankit Sharma', 'Bipul Sharma', 'CL White', 'DJ Hooda', 'KS Williamson', 'KV Sharma',
            'Mohammad Nabi', 'Parvez Rasool', 'Rashid Khan', 'S Nadeem', 'Shakib Al Hasan', 'Y Venugopal Rao', 'YK Pathan',
            'Yuvraj Singh']

rr_spin = ['A Chandila', 'AA Chavan', 'AA Jhunjhunwala', 'AC Voges', 'AJ Finch', 'AL Menaria', 'Ankit Sharma',
           'AS Raut', 'BJ Hodge', 'D Short', 'DJ Hooda', 'D Salunkhe', 'GB Hogg', 'I Sodhi', 'J Botha', 'K Gowtham',
           'L Livingstone', 'LRPL Taylor', 'M Lomror', 'PV Tambe', 'ND Doshi', 'R Parag', 'R Tewatia', 'S Badree',
           'S Gopal', 'RA Jadeja', 'S Midhun', 'SK Warne', 'YK Pathan']

punj_spin = ['AC Gilchrist', 'AR Patel', 'BA Bhatt', 'Bipul Sharma', 'DJ Hussey', 'GJ Maxwell', 'Gurkeerat Singh'
            'H Brar', 'Karanveer Singh', 'KC Cariappa', 'M Ashwin', 'M Kartik', 'M Ur Rahman', 'M Vijay', 'MK Tiwary',
             'P Sahu', 'PP Chawla', 'R Ashwin', 'R Tewatia', 'RR Powar', 'Shivam Sharma', 'SN Khan', 'Swapnil Singh',
             'V Chakravarthy', 'Yuvraj Singh']
```

```{python}
# Replacing all spin bowlers' names with 'spinner' under `bowler` column

df.loc[(df.bowling_team=='Royal Challengers Bangalore')&(df.bowler.isin(rcb_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Delhi Capitals')&(df.bowler.isin(dd_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Delhi Daredevils')&(df.bowler.isin(dd_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Mumbai Indians')&(df.bowler.isin(mi_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Chennai Super Kings')&(df.bowler.isin(csk_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Kings XI Punjab')&(df.bowler.isin(punj_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Sunrisers Hyderabad')&(df.bowler.isin(srh_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Kolkata Knight Riders')&(df.bowler.isin(kkr_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Deccan Chargers')&(df.bowler.isin(dc_spin)),'bowler'] = 'spinner'
df.loc[(df.bowling_team=='Rajasthan Royals')&(df.bowler.isin(rr_spin)),'bowler'] = 'spinner'
```

```{python}
# Replacing all fast/pace bowlers' names with 'pacer' under `bowler` column

l = ['spinner']
df.loc[~df.bowler.isin(l),'bowler'] = 'pacer'
```

```{python}
df.loc[df.bowler=='pacer']
```

```{python}
df.loc[df.bowler=='spinner']
```

```{python}
# sanity check - check for NaN values in `bowler` column

df.bowler.isna().sum()
```

## Feature Engineering `batsman` and `non_striker` Type

In cricket, the batting order is the sequence in which batters play through their team's innings, there always being two batters taking part at any one time. All eleven players in a team are required to bat if the innings is completed (i.e., if the innings does not close early due to a declaration or other factor).

The batting order is colloquially subdivided into:

1. Top order (batters one to three)
2. Middle order (batters four to eight)
3. Tail enders (batters nine to eleven) 

In the code cell below, we have created a custom list of all top order batsman and tail enders for each team. We have then modified the `batsman` and `non_striker` columns in the dataframe which will be used to identify the type of batsman, "top_order", "middle_order" or "tail_ender". This column, we belive, should lend to the predictive power of our models. For example, a top order batsman is more likely to score a boundary than a tail ender, purely based on batting skill. Moreover, if given the scenario that a top order batsman bats till the last 5 overs of the game with a tail ender at the non-striker's end, the top order batsman is more likely to retain strike to maximize the number of runs scored in the last 5 overs.

We deliberately chose not to take the easier route of engineering these columns column based on the `wickets` column. Doing so would induce multicollinearity in the data and, more importantly, alter the `batsman` and `non_striker` columns in a way that would compromise the integrity of our data.

**Note:** It is not uncommon in cricket that an opening batsman may play in the middle order or vice-versa, given various factors such as recent form of the batsman or captain's/coach's discretion. Therefore, we have categorized individual batters with regards to their ideal batting position. For example, Robin Uthappa started off as a middle order batsman in 2008 with Mumbai Indians, but was promoted to the top order when he joined Royal Challengers Bangalore and Kolkata Knight Riders in 2010 and 2014 respectively.

```{python}
# Creating a list of all top order batsmen and tail enders for each team

rcb_top_order = ['TM Dilshan', 'KP Pietersen', 'CH Gayle', 'PA Patel', 'V Kohli', 'AB de Villiers', 'R Dravid',
                'JH Kallis', 'MK Pandey', 'W Jaffer', 'S Chanderpaul', 'LRPL Taylor', 'SR Watson', 'Mandeep Singh',
                'A Mukund', 'BB McCullum', 'CA Pujara', 'MA Agarwal', 'KL Rahul', 'Q de Kock', 'J Arunkumar', 'S Sriram']

rcb_tail_enders = ['SB Joshi', 'KP Appanna', 'A Kumble', 'Abdur Razzak', 'DL Vettori', 'KB Arun Karthik', 'S Sriram', 'AA Kazi', 'R Ninan',
                   'J Syed Mohammad', 'M Muralitharan', 'M Kartik', 'P R Barman', 'YS Chahal', 'SB Jakati', 'T Shamsi', 'Parvez Rasool',
                   'P Kumar', 'Z Khan', 'R Vinay Kumar', 'DW Steyn', 'ND Doshi', 'DP Nannes', 'JJ van der Wath', 'S Aravind', 'S Badree',
                   'CK Langeveldt', 'RR Bhatkal', 'P Parameswaran', 'JD Unadkat', 'RP Singh', 'R Rampaul', 'MA Starc', 'M Ashwin'
                   'AB Dinda', 'VR Aaron', 'AN Ahmed', 'AF Milne', 'KW Richardson', 'CJ Jordan', 'TS Mills', 'A Choudhary',
                   'B Stanlake', 'Avesh Khan', 'UT Yadav', 'K Khejroliya', 'Mohammed Siraj', 'TG Southee', 'N Saini']

mi_top_order = ['N Rana', 'RG Sharma', 'ST Jayasuriya', 'SR Tendulkar', 'YV Takawale', 'AM Rahane', 'DR Smith', 'L Ronchi',
                'AC Blizzard', 'RV Uthappa', 'AT Rayudu', 'DJ Jacobs', 'S Dhawan', 'SS Tiwary', 'JP Duminy', 'AP Tare',
                'AJ Finch', 'E Lewis', 'Ishan Kishan', 'Q de Kock', 'AM Rahane', 'LMP Simmons', 'CM Gautam', 'C Madan',
                'PA Patel', 'BR Dunk', 'JC Buttler', 'SM Pollock', 'AS Yadav', 'HH Gibbs', 'UBT Chand', 'GJ Maxwell',
                'MJ Guptill', 'RE Levi']

mi_tail_enders = ['A Dananjaya', 'AG Murtaza', 'Harbhajan Singh', 'J Yadav', 'M Markande', 'PP Ojha', 'RD Chahar', 'RW Price',
                  'VS Yeligati', 'Z Khan', 'SL Malinga', 'JJ Bumrah', 'MG Johnson', 'P Suyal', 'A Nehra', 'DS Kulkarni',
                  'MA Khote', 'CRD Fernando', 'DJ Thornely', 'RR Raje', 'DR Smith', 'RP Singh', 'CJ McKay', 'NLTC Perera', 'R Shukla',
                  'A Nel', 'Z Khan', 'R McLaren', 'AN Ahmed', 'MM Patel', 'YS Chahal', 'P Kumar', 'K Santokie', 'M de Lange', 'R Vinay Kumar',
                'MJ McClenaghan', 'TG Southee', 'Mustafizur Rahman', 'PJ Sangwan', 'R Salam', 'J Behrendorff', 'A Joseph', 'BB Sran']

kkr_top_order = ['SC Ganguly', 'BB McCullum', 'RT Ponting', 'WP Saha', 'Salman Butt', 'AB Agarkar', 'Mohammad Hafeez', 'A Chopra', 'BJ Hodge',
                 'MK Tiwary', 'CA Pujara', 'CH Gayle', 'OA Shah', 'Mandeep Singh', 'AD Mathews', 'DJ Hussey', 'MS Bisla', 'JH Kallis', 'YK Pathan',
                 'G Gambhir', 'BJ Haddin', 'SP Goswami', 'EJG Morgan', 'RV Uthappa', 'MK Pandey', 'CA Lynn', 'C Munro', 'SP Narine', 'N Rana', 'S Gill',
                 'N Naik', 'J Denly']

kkr_tail_enders = ['BAW Mendis', 'GB Hogg', 'KC Cariappa', 'M Kartik', 'Kuldeep Yadav', 'MB Parmar', 'R Vinay Kumar',
                   'PP Chawla',  'SMSM Senanayake', 'AB Dinda', 'I Sharma', 'AB Agarkar', 'Umar Gul', 'Shoaib Akhtar',
                   'CK Langeveldt', 'SE Bond', 'JD Unadkat', 'L Balaji', 'B Lee', 'M de Lange', 'PJ Sangwan', 'M Morkel',
                   'Mohammed Shami', 'R McLaren', 'Shami Ahmed', 'AS Rajpoot', 'TA Boult', 'MG Johnson', 'T Curran',
                   'S Mavi', 'P Krishna', 'J Searles', 'L Ferguson', 'H Gurney', 'P Raj', 'S Warrier', 'UT Yadav']

csk_top_order = ['F du Plessis', 'SK Raina', 'M Vijay', 'ML Hayden', 'PA Patel', 'MEK Hussey', 'BB McCullum', 'S Vidyut',
                 'AT Rayudu', 'SP Fleming', 'DR Smith', 'S Anirudha', 'WP Saha', 'SR Watson', 'GJ Bailey']

csk_tail_enders = ['Imran Tahir', 'M Muralitharan', 'R Ashwin', 'S Badree', 'S Randiv', 'S Vidyut', 'SB Jakati',
                   'P Amarnath', 'Joginder Sharma', 'M Ntini', 'L Balaji', 'S Tyagi', 'NLTC Perera', 'C Ganapathy',
                   'DE Bollinger', 'TG Southee', 'VY Mahesh', 'BW Hilfenhaus', 'DP Nannes',  'AS Rajpoot', 'B Laughlin', 'MM Sharma',
                   'IC Pandey', 'V Shankar', 'A Nehra', 'RG More', 'DL Chahar', 'M Wood', 'L Ngidi', 'KM Asif', 'S Kuggeleijn']

dc_top_order = ['AC Gilchrist', 'VVS Laxman', 'HH Gibbs', 'LPC Silva', 'SB Styris',
                'MD Mishra', 'TL Suman', 'Anirudh Singh', 'S Dhawan', 'IR Jaggi', 'KC Sangakkara', 'S Sohal',
                'MJ Lumb', 'DJ Harris', 'PA Patel', 'PA Reddy']

dc_tail_enders = ['A Mishra', 'Ankit Sharma', 'PP Ojha', 'WPUJC Vaas', 'RP Singh', 'D Kalyankrishna', 'DP Vijaykumar',
                  'PM Sarvesh Kumar', 'Jaskaran Singh', 'KAJ Roach', 'Harmeet Singh', 'RJ Harris', 'DW Steyn', 'I Sharma',
                  'Anand Rajan', 'DJ Harris', 'TP Sudhindra', 'V Pratap Singh', 'J Theron']

dd_top_order = ['G Gambhir', 'V Sehwag', 'S Dhawan', 'AB de Villiers', 'TM Dilshan', 'DA Warner', 'KD Karthik',
                'UBT Chand', 'AJ Finch', 'NV Ojha', 'CA Ingram', 'KP Pietersen', 'DPMD Jayawardene', 'MC Juneja',
                'Q de Kock', 'M Vijay', 'MA Agarwal', 'SS Iyer', 'JP Duminy', 'MK Tiwary', 'SV Samson',
                'KK Nair', 'AP Tare', 'C Munro', 'JJ Roy', 'P Shaw', 'S Dhawan']

dd_tail_enders = ['A Mishra', 'Imran Tahir', 'J Yadav', 'R Sharma', 'S Lamichhane', 'S Nadeem', 'S Sriram',
                  'Sunny Gupta', 'GD McGrath', 'B Geeves', 'Mohammad Asif', 'VY Mahesh', 'PJ Sangwan', 'DP Nannes',
                  'UT Yadav', 'Y Nagar', 'A Nehra', 'AB Dinda', 'M Morkel', 'S Nadeem', 'VR Aaron', 'AM Salvi', 'DAJ Bracewell',
                  'Sunny Gupta', 'S Kaul', 'Mohammed Shami', 'WD Parnell', 'JD Unadkat', 'R Sharma',
                  'JA Morkel', 'DJ Muthuswami', 'Z Khan', 'GS Sandhu', 'J Yadav', 'K Rabada', 'TA Boult', 'Avesh Khan', 'L Plunkett', 'J Dala']

srh_top_order = ['PA Reddy', 'PA Patel', 'CL White', 'KC Sangakkara', 'Q de Kock', 'GH Vihari', 'S Dhawan', 'A Ashish Reddy', 'AJ Finch', 'KL Rahul',
                 'NV Ojha', 'DA Warner', 'KS Williamson', 'RS Bopara', 'MC Henriques', 'DJ Hooda', 'WP Saha', 'R Bhui', 'MK Pandey',
                 'A Hales', 'SP Goswami', 'J Bairstow', 'V Shankar', 'MJ Guptill']

srh_tail_enders = ['DW Steyn', 'I Sharma', 'A Ashish Reddy', 'Anand Rajan', 'B Kumar', 'TA Boult', 'Sandeep Sharma',
                   'P Kumar', 'A Nehra', 'Mustafizur Rahman', 'BB Sran', 'S Kaul', 'Mohammed Siraj', 'B Stanlake',
                   'Basil Thampi', 'K Ahmed', 'S Sharma', 'A Mishra', 'Ankit Sharma', 'Parvez Rasool', 'S Nadeem']

rr_top_order = ['T Kohli', 'YK Pathan', 'SR Watson', 'M Kaif', 'Kamran Akmal', 'GC Smith', 'M Rawat', 'SA Asnodkar', 'NK Patel', 'Younis Khan',
                'NV Ojha', 'MJ Lumb', 'DR Martyn', 'AA Jhunjhunwala', 'FY Fazal', 'AG Paunikar', 'R Dravid',
                'AM Rahane', 'SP Goswami', 'OA Shah', 'BJ Hodge', 'MDKJ Perera', 'DH Yagnik', 'SV Samson',
                'KK Nair', 'Ankit Sharma', 'KK Cooper', 'UBT Chand', 'SPD Smith', 'DJ Hooda', 'D Short', 'H Klaasen', 'RA Tripathi', 'JC Buttler']

rr_tail_enders = ['A Chandila', 'AA Chavan', 'AS Raut', 'GB Hogg', 'I Sodhi', 'PV Tambe', 'ND Doshi', 'S Badree',
                  'S Gopal', 'S Midhun', 'SK Warne', 'MM Patel', 'SK Trivedi', 'Pankaj Singh', 'SW Tait', 'Kamran Khan',
                  'A Uniyal', 'M Morkel', 'S Narwal', 'SB Wagh', 'AP Dole', 'FY Fazal', 'A Singh',
                  'S Sreesanth', 'R Shukla', 'VS Malik', 'KW Richardson', 'DS Kulkarni', 'R Bhatia', 'TG Southee',
                  'J Theron', 'B Brainder Sran', 'JD Unadkat', 'B Laughlin', 'J Archer', 'Anureet Singh', 'VR Aaron', 'O Thomas']

punj_top_order = ['K Goel', 'JR Hopes', 'KC Sangakkara', 'DPMD Jayawardene', 'Yuvraj Singh', 'SM Katich', 'SE Marsh',
                  'LA Pomersbach', 'RS Bopara', 'MS Bisla', 'PC Valthaty', 'AC Gilchrist', 'Mandeep Singh',
                  'N Saini', 'M Vohra', 'Gurkeerat Singh', 'CA Pujara', 'V Sehwag', 'WP Saha', 'KK Nair'
                  'M Vijay', 'HM Amla', 'EJG Morgan', 'MJ Guptill', 'KL Rahul', 'MA Agarwal', 'CH Gayle', 'AJ Finch'
                  ]

punj_tail_enders = ['BA Bhatt', 'H Brar', 'Karanveer Singh', 'KC Cariappa', 'M Ashwin', 'M Kartik', 'M Ur Rahman', 'RJ Harris',
                    'P Sahu', 'RR Powar', 'Shivam Sharma', 'Swapnil Singh', 'J Theron', 'VS Malik', 'L Ablish', 'P Kumar',
                    'V Chakravarthy', 'B Lee', 'S Sreesanth', 'VRV Singh', 'Gagandeep Singh', 'YA Abdulla', 'R McLaren',
                    'Harmeet Singh', 'P Awana', 'MS Gony', 'Sandeep Sharma (1)', 'MG Neser', 'Sandeep Sharma', 'L Balaji', 'MG Johnson',
                    'BE Hendricks', 'Anureet Singh', 'MM Sharma', 'KJ Abbott', 'VR Aaron', 'T Natarajan', 'I Sharma', 'MJ Henry',
                    'BB Sran', 'AS Rajpoot', 'Mohammed Shami', 'H Viljoen', 'A Singh', 'AJ Tye']
```

```{python}
# Replacing all batsman and non_striker names with "top"

df.loc[(df.batting_team=='Royal Challengers Bangalore')&(df.batsman.isin(rcb_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Delhi Capitals')&(df.batsman.isin(dd_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Delhi Daredevils')&(df.batsman.isin(dd_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Chennai Super Kings')&(df.batsman.isin(csk_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Kings XI Punjab')&(df.batsman.isin(punj_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Sunrisers Hyderabad')&(df.batsman.isin(srh_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Kolkata Knight Riders')&(df.batsman.isin(kkr_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Deccan Chargers')&(df.batsman.isin(dc_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Rajasthan Royals')&(df.batsman.isin(rr_top_order)),'batsman'] = 'top'
df.loc[(df.batting_team=='Mumbai Indians')&(df.batsman.isin(mi_top_order)),'batsman'] = 'top'


df.loc[(df.batting_team=='Royal Challengers Bangalore')&(df.non_striker.isin(rcb_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Delhi Capitals')&(df.non_striker.isin(dd_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Delhi Daredevils')&(df.non_striker.isin(dd_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Chennai Super Kings')&(df.non_striker.isin(csk_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Kings XI Punjab')&(df.non_striker.isin(punj_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Sunrisers Hyderabad')&(df.non_striker.isin(srh_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Kolkata Knight Riders')&(df.non_striker.isin(kkr_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Deccan Chargers')&(df.non_striker.isin(dc_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Rajasthan Royals')&(df.non_striker.isin(rr_top_order)),'non_striker'] = 'top'
df.loc[(df.batting_team=='Mumbai Indians')&(df.non_striker.isin(mi_top_order)),'non_striker'] = 'top'
```

```{python}
# Replacing all batsman and non_striker names with "tail"

df.loc[(df.batting_team=='Royal Challengers Bangalore')&(df.batsman.isin(rcb_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Delhi Capitals')&(df.batsman.isin(dd_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Delhi Daredevils')&(df.batsman.isin(dd_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Chennai Super Kings')&(df.batsman.isin(csk_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Kings XI Punjab')&(df.batsman.isin(punj_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Sunrisers Hyderabad')&(df.batsman.isin(srh_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Kolkata Knight Riders')&(df.batsman.isin(kkr_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Deccan Chargers')&(df.batsman.isin(dc_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Rajasthan Royals')&(df.batsman.isin(rr_tail_enders)),'batsman'] = 'tail'
df.loc[(df.batting_team=='Mumbai Indians')&(df.batsman.isin(mi_tail_enders)),'batsman'] = 'tail'

df.loc[(df.batting_team=='Royal Challengers Bangalore')&(df.non_striker.isin(rcb_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Delhi Capitals')&(df.non_striker.isin(dd_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Delhi Daredevils')&(df.non_striker.isin(dd_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Chennai Super Kings')&(df.non_striker.isin(csk_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Kings XI Punjab')&(df.non_striker.isin(punj_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Sunrisers Hyderabad')&(df.non_striker.isin(srh_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Kolkata Knight Riders')&(df.non_striker.isin(kkr_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Deccan Chargers')&(df.non_striker.isin(dc_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Rajasthan Royals')&(df.non_striker.isin(rr_tail_enders)),'non_striker'] = 'tail'
df.loc[(df.batting_team=='Mumbai Indians')&(df.non_striker.isin(mi_tail_enders)),'non_striker'] = 'tail'
```

```{python}
# replace remaining names with "middle"

l = ['top', 'tail']
df.loc[~df.batsman.isin(l),'batsman'] = 'middle'
df.loc[~df.non_striker.isin(l),'non_striker'] = 'middle'
```

```{python}
# sanity check for nulls

print(df.batsman.isna().sum())
print(df.non_striker.isna().sum())
```

```{python}
df.loc[df.batsman=='top'].shape
```

```{python}
df.loc[df.batsman=='middle'].shape
```

```{python}
df.loc[df.batsman=='tail'].shape
```

## Renaming Old Team Names To Current Names

```{python}
# Renaming the teams with their latest names

df.loc[(df.batting_team=='Delhi Daredevils'),'batting_team'] = 'Delhi Capitals'
df.loc[(df.bowling_team=='Delhi Daredevils'),'bowling_team'] = 'Delhi Capitals'

df.loc[(df.batting_team=='Deccan Chargers'),'batting_team'] = 'Sunrisers Hyderabad'
df.loc[(df.bowling_team=='Deccan Chargers'),'bowling_team'] = 'Sunrisers Hyderabad'

# sanity check
print(df.loc[(df.batting_team=='Delhi Daredevils')|(df.bowling_team=='Delhi Daredevils')])
print(df.loc[(df.batting_team=='Deccan Chargers')|(df.bowling_team=='Deccan Chargers')])
```

## Grouping `match_id` Column for Playoffs

```{python}
playoff = ['3rd Place Playoff', 'eliminator', 'final', 'semi-final1', 'semi-final2', 'semi-final']
df.loc[df.match_id.isin(playoff), 'match_id'] = 'playoffs'
```

```{python}
df.loc[df.match_id=='playoffs']
```

```{python}
p = ['playoffs']
df.loc[~df.match_id.isin(p),'match_id'] = 'round-robin'
```

```{python}
df.loc[df.match_id=='round-robin']
```

```{python}
df.rename(columns={"match_id": "match_type", "bowler": "bowler_type"}, inplace=True)
```

```{python}
#| scrolled: true
df.head()
```

## Feature Engineering `ball_length` Column from `commentary` Column

```{python}
def lower_comm(x):
    return x.lower()
df['commentary'] = df['commentary'].apply(lower_comm)
```

```{python}
full_toss_length = ['full toss', 'beamer', 'full-toss', 'fulltoss']
yorker_length = ['yorker', 'yorker length', 'yorker-ish', 'blockhole', 'block-hole', 'block hole', 'toe-crusher', 'toe crusher']
full_length = ['full', 'full and straight', 'full length', 'fullish', 'full-ish', 'fuller', 'very full', 'full ball', 'full delivery', 'forward', 'front foot', 'flicked off the pads', 'glanced off the pads', 'flicks off the pad', 'off the pads', 'off the pad',
               'clips', 'clipped', 'pads', 'on the pad', 'into the pads', 'cover drive', 'front', 'beaten', 'beaten on the drive','pitches it up', 'full on', 'slog', 'slogs', 'flat and quick',
               'onto the pads', 'aimed at leg stump', 'aimed at leg-stump', 'pitched at leg stump', 'floated up', 'floats', 'floating', 'flights', 'flight', 'inside out', 'in the slot', 'slot delivery', 'long on', 'long-on',
               'flighted', 'flighting', 'tossed up', 'overpitched', 'overpitching', 'overpitches', 'pitched up', 'half-volley', 'half volley', 'loopy', 'looping', 'reverse sweep', 'down the ground',
               'reverse-sweep', 'sweep', 'sweeping', 'paddled', 'paddle', 'paddles', 'slog swept', 'slog-sweep', 'off-drive', 'straight-drive', 'worked', 'works', 'meeting the pitch', 'lunges forward', 'cover-drive', 'cover drive',
               'off drive', 'slog-sweeps', 'straight drive', 'on-drive', 'on drive', 'helicopter shot', 'helicopter', 'over cover', 'over extra cover', 'pitch of the ball', 'to the pitch', 'slower full', 'slower, full']
good_length = ['length ball', 'good length', 'length delivery', 'at a length', ', length,', 'length', 'peach', 'corridor of uncertainty', 'punched', 'googly', 'cramped', 'cramps', 'cramping', 'thigh pad', 'cramp',
               'goodish', 'good-ish', 'nudges', 'driven on the up', 'slower length ball', 'slower, good length', 'on the up', 'length outside', 'length on', 'tight length']
short_length = ['short', 'short ball', 'short delivery', 'bouncer', 'pulled', 'hooked', 'pulling', 'hooking', 'pull', 'hook',
                'back of a length', 'back of length', 'back of good length', 'back foot', 'back-foot', 'heaved', 'hoicked',
                'short of good length', 'short length', 'shortish', 'short-ish', 'cuts', 'cut', 'cutting it', 'cutting the', 'dragged back', 'drags his length back',
                'back-of-a-length', 'holding back the length']
```

```{python}
conditions  = [df.commentary.str.contains('|'.join(full_toss_length)), df.commentary.str.contains('|'.join(yorker_length)), df.commentary.str.contains('|'.join(full_length)), df.commentary.str.contains('|'.join(good_length)), df.commentary.str.contains('|'.join(short_length))]
choices = ["full toss", "yorker", "full", "good", "short"]

df["ball_length"] = np.select(conditions, choices, default=np.nan)
df.head()
```

```{python}
df.loc[df.ball_length=='nan'].shape[0]
# df.loc[df.ball_length=='nan']['commentary'].to_csv('commentary_nan.csv')

# replace all NaN values in `ball_length` column with 'Unknown'

df.loc[df.ball_length=='nan','ball_length'] = 'Unknown'
```

```{python}
df.loc[(df.ball_length=='nan')].shape
```

## Feature Engineering `total_runs` as a Summation

```{python}
# sum total_runs until `inning` doesn't change

df['cumulative_runs'] = df.groupby(['season', 'match_type', 'venue', 'inning', 'batting_team', 'bowling_team'])['total_runs'].cumsum()
```

```{python}
df['cumulative_runs']
```

## Feature Engineering `Event` Response Variable

```{python}
df['batsman_runs'] = df['batsman_runs'].astype('int64')
df['total_runs'] = df['total_runs'].astype('int64')
df['extra_runs'] = df['extra_runs'].astype('int64')
df['noball_runs'] = df['noball_runs'].astype('int64')
df['legbye_runs'] = df['legbye_runs'].astype('int64')
df['bye_runs'] = df['bye_runs'].astype('int64')
df['wide_runs'] = df['wide_runs'].astype('int64')

def event_pred(row):
    if row['batsman_runs']==0 and row['extra_runs']== 0 and row['total_runs'] == 0 and row['dismissal_kind']!='bowled' and row['dismissal_kind']!='caught' and row['dismissal_kind']!='caught and bowled' and row['dismissal_kind']!='hit wicket' and row['dismissal_kind']!='lbw' and row['dismissal_kind']!='obstructing the field' and row['dismissal_kind']!='retired hurt' and row['dismissal_kind']!='run out' and row['dismissal_kind']!='stumped':
        return 'Dot'
    if row['batsman_runs']>0 and row['extra_runs']== 0 and row['total_runs'] > 0 and row['dismissal_kind']!='bowled' and row['dismissal_kind']!='caught' and row['dismissal_kind']!='caught and bowled' and row['dismissal_kind']!='hit wicket' and row['dismissal_kind']!='lbw' and row['dismissal_kind']!='obstructing the field' and row['dismissal_kind']!='retired hurt' and row['dismissal_kind']!='run out' and row['dismissal_kind']!='stumped':
        return 'Runs'
    if row['wide_runs']>0 or row['bye_runs']>0 or row['legbye_runs']>0 or row['noball_runs']>0 or row['batsman_runs']>=0 and row['extra_runs']>0 and row['total_runs']>0 and row['dismissal_kind']!='bowled' and row['dismissal_kind']!='caught' and row['dismissal_kind']!='caught and bowled' and row['dismissal_kind']!='hit wicket' and row['dismissal_kind']!='lbw' and row['dismissal_kind']!='obstructing the field' and row['dismissal_kind']!='retired hurt' and row['dismissal_kind']!='run out' and row['dismissal_kind']!='stumped':
        return 'Extras'
    if row['dismissal_kind']=='bowled' or row['dismissal_kind']=='caught' or row['dismissal_kind']=='caught and bowled' or row['dismissal_kind']=='hit wicket' or row['dismissal_kind']=='lbw' or row['dismissal_kind']=='obstructing the field' or row['dismissal_kind']=='retired hurt' or row['dismissal_kind']=='run out' or row['dismissal_kind']=='stumped':
        return 'WICKET!'
```

```{python}
df['event'] = df.apply(lambda row: event_pred(row), axis=1)
```

```{python}
df.loc[df.event=='Dot'].shape[0]
```

```{python}
df.loc[df.event=='Runs'].shape[0]
```

```{python}
df.loc[df.event=='Extras'].shape[0]
```

```{python}
df.loc[df.event=='WICKET!'].shape[0]
```

```{python}
#| scrolled: true
df.dtypes
```

```{python}
df['match_type'] = df['match_type'].astype('category')
df['venue'] = df['venue'].astype('category')
df['inning'] = df['inning'].astype('category')
df['batting_team'] = df['batting_team'].astype('category')
df['bowling_team'] = df['bowling_team'].astype('category')
df['batsman'] = df['batsman'].astype('category')
df['non_striker'] = df['non_striker'].astype('category')
df['bowler_type'] = df['bowler_type'].astype('category')
df['ball_length'] = df['ball_length'].astype('category')
df['ball'] = df['ball'].astype('float64')
df['wickets'] = df['wickets'].astype('int64')
df['cumulative_runs'] = df['cumulative_runs'].astype('int64')

df['event'] = df['event'].astype('object')

df.drop(labels='commentary', axis=1, inplace=True)
df.drop(labels='wide_runs', axis=1, inplace=True)
df.drop(labels='bye_runs', axis=1, inplace=True)
df.drop(labels='legbye_runs', axis=1, inplace=True)
df.drop(labels='noball_runs', axis=1, inplace=True)
df.drop(labels='batsman_runs', axis=1, inplace=True)
df.drop(labels='extra_runs', axis=1, inplace=True)
df.drop(labels='dismissal_kind', axis=1, inplace=True)
df.drop(labels='total_runs', axis=1, inplace=True)

df.to_csv('data/clean/deliveries_clean.csv', index=False)

df.head()
```

```{python}
df.dtypes
```

```{python}
df.describe()
```

## Train-Test Split

```{python}
# split the dataset into train and test sets by season

train = df.loc[df.season <= 2018]

train.to_csv('data/clean/train.csv', index=False)

test = df.loc[df.season == 2019]

test.to_csv('data/clean/test.csv', index=False)

# drop `season` column from train and test sets

train.drop(labels='season', axis=1, inplace=True)
test.drop(labels='season', axis=1, inplace=True)
```

```{python}
#from sklearn.preprocessing import minmax_scale
#df[['ball','wickets']] = minmax_scale(df[['ball','wickets']])

encoded_df_train = pd.get_dummies(data=train, columns=['match_type', 'venue', 'inning', 'batting_team', 'bowling_team', 'batsman', 'non_striker', 'bowler_type', 'ball_length'])

encoded_df_test = pd.get_dummies(data=test, columns=['match_type', 'venue', 'inning', 'batting_team', 'bowling_team', 'batsman', 'non_striker', 'bowler_type', 'ball_length'])
```

```{python}
#| scrolled: true
encoded_df_train.columns
```

```{python}
print(encoded_df_train.shape)
print(encoded_df_test.shape)

# 88-12 train-test split
```

```{python}
encoded_df_train = encoded_df_train[['ball', 'wickets', 'cumulative_runs', 'match_type_playoffs',
       'match_type_round-robin', 'venue_Ahmedabad', 'venue_Bangalore',
       'venue_Chennai', 'venue_Cuttack', 'venue_Delhi', 'venue_Dharamsala',
       'venue_Hyderabad', 'venue_Indore', 'venue_Kolkata', 'venue_Mohali',
       'venue_Mumbai', 'venue_Nagpur', 'venue_Pune', 'venue_Raipur',
       'venue_Rajasthan', 'venue_Ranchi', 'venue_Visakhapatnam', 'inning_1',
       'inning_2', 'batting_team_Chennai Super Kings',
       'batting_team_Delhi Capitals', 'batting_team_Kings XI Punjab',
       'batting_team_Kolkata Knight Riders', 'batting_team_Mumbai Indians',
       'batting_team_Rajasthan Royals',
       'batting_team_Royal Challengers Bangalore',
       'batting_team_Sunrisers Hyderabad', 'bowling_team_Chennai Super Kings',
       'bowling_team_Delhi Capitals', 'bowling_team_Kings XI Punjab',
       'bowling_team_Kolkata Knight Riders', 'bowling_team_Mumbai Indians',
       'bowling_team_Rajasthan Royals',
       'bowling_team_Royal Challengers Bangalore',
       'bowling_team_Sunrisers Hyderabad', 'batsman_top', 'batsman_middle', 'batsman_tail',
       'non_striker_middle', 'non_striker_tail',
       'non_striker_top', 'bowler_type_pacer', 'bowler_type_spinner',
       'ball_length_Unknown', 'ball_length_full', 'ball_length_full toss',
       'ball_length_good', 'ball_length_short', 'ball_length_yorker', 'event']]

encoded_df_test = encoded_df_test[['ball', 'wickets', 'cumulative_runs', 'match_type_playoffs',
       'match_type_round-robin', 'venue_Ahmedabad', 'venue_Bangalore',
       'venue_Chennai', 'venue_Cuttack', 'venue_Delhi', 'venue_Dharamsala',
       'venue_Hyderabad', 'venue_Indore', 'venue_Kolkata', 'venue_Mohali',
       'venue_Mumbai', 'venue_Nagpur', 'venue_Pune', 'venue_Raipur',
       'venue_Rajasthan', 'venue_Ranchi', 'venue_Visakhapatnam', 'inning_1',
       'inning_2', 'batting_team_Chennai Super Kings',
       'batting_team_Delhi Capitals', 'batting_team_Kings XI Punjab',
       'batting_team_Kolkata Knight Riders', 'batting_team_Mumbai Indians',
       'batting_team_Rajasthan Royals',
       'batting_team_Royal Challengers Bangalore',
       'batting_team_Sunrisers Hyderabad', 'bowling_team_Chennai Super Kings',
       'bowling_team_Delhi Capitals', 'bowling_team_Kings XI Punjab',
       'bowling_team_Kolkata Knight Riders', 'bowling_team_Mumbai Indians',
       'bowling_team_Rajasthan Royals',
       'bowling_team_Royal Challengers Bangalore',
       'bowling_team_Sunrisers Hyderabad', 'batsman_top', 'batsman_middle', 'batsman_tail',
       'non_striker_middle', 'non_striker_tail',
       'non_striker_top', 'bowler_type_pacer', 'bowler_type_spinner',
       'ball_length_Unknown', 'ball_length_full', 'ball_length_full toss',
       'ball_length_good', 'ball_length_short', 'ball_length_yorker', 'event']]
```

```{python}
#| scrolled: true
encoded_df_train['event'].unique()
```

```{python}
X_train = encoded_df_train.iloc[:,:-1].values
print("X_train shape:", X_train.shape)

y_train = encoded_df_train.iloc[:,-1].values
print("y_train shape:",y_train.shape)

X_test = encoded_df_test.iloc[:,:-1].values
print("X_test shape:",X_test.shape)

y_test = encoded_df_test.iloc[:,-1].values
print("y_test shape:",y_test.shape)
```

## Boosting

```{python}

#X_train = train.iloc[:,:-1].values
print("X_train shape:", X_train.shape)

#y_train = train.iloc[:,-1].values
print("y_train shape:",y_train.shape)

#X_test = test.iloc[:,:-1].values
print("X_test shape:",X_test.shape)

#y_test = test.iloc[:,-1].values
print("y_test shape:",y_test.shape)

encoder = LabelEncoder()
y_train = encoder.fit_transform(y_train)
y_test = encoder.fit_transform(y_test)

#X_train = X_train.to_numpy()
y_train = y_train.reshape(len(y_train),)

#X_test = X_test.to_numpy()
y_test = y_test.reshape(len(y_test),)
```

# Perform Classification Routine

```{python}
%%time

from sklearn.exceptions import ConvergenceWarning
from sklearn.exceptions import DataConversionWarning
from tqdm import tqdm  # Import tqdm
# Assuming other necessary imports like LogisticRegression, DecisionTreeClassifier, etc., are already made

ConvergenceWarning('ignore')
warnings.filterwarnings(action='ignore', category=DataConversionWarning)

def base_models():
    models = dict()
    models["LR"] = LogisticRegression(verbose=0, max_iter=3000)
    models["Tree"] = DecisionTreeClassifier()
    models["GNB"] = GaussianNB()
    models["RF"] = RandomForestClassifier(verbose=0)
    models["AdaBoost"] = AdaBoostClassifier()
    models["Bagging"] = BaggingClassifier(verbose=0)
    models["GBM"] = GradientBoostingClassifier(verbose=0)
    models["XGB"] = XGBClassifier(verbosity=0)
    models["CatBoost"] = CatBoostClassifier(verbose=0)
    return models

# Function to evaluate the list of models
def eval_models(model):
    cv = RepeatedKFold(n_splits=5, n_repeats=2, random_state=1)
    accuracy = cross_val_score(model, X_train, y_train, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')
    weighted_f1 = cross_val_score(model, X_train, y_train, scoring='f1_weighted', cv=cv, n_jobs=-1, error_score='raise')
    return accuracy, weighted_f1

models = base_models()

# evaluate the models and store results
results = {}
names = list()
accuracies = []
weighted_f1s = []

final_models = {}  # Create a dictionary to store the fitted models

for name, model in tqdm(models.items()):  # Wrap models.items() with tqdm to get a progress bar
    accuracy, weighted_f1 = eval_models(model)
    accuracies.extend(accuracy)
    weighted_f1s.extend(weighted_f1)
    names.extend([name] * len(accuracy))
    print('>%s Accuracy: %.3f Weighted F1: %.3f' % (name, accuracy.mean(), weighted_f1.mean()))

    # Fit the model with the training data
    fitted_model = model.fit(X_train, y_train)

    # Save the fitted model as a pickle file
    pkl_filename = f"products/pickle_files/{name}.pkl"
    with open(pkl_filename, 'wb') as file:
        pickle.dump(fitted_model, file)

    # Store the fitted model in the final_models dictionary
    final_models[name] = fitted_model
```

```{python}
# delete catboost_info folder

shutil.rmtree('catboost_info')

# Save accuracy and weighted_f1 scores for each model in a dataframe

results['Model'] = names
results['Accuracy'] = accuracies
results['Weighted_F1'] = weighted_f1s

classifmod = pd.DataFrame(results)

# Generate confusion matrices and reports for each final model
confusion_matrices = {}
classification_reports = {}
for name, model in final_models.items():
    y_pred = model.predict(X_test)
    confusion_matrices[name] = confusion_matrix(y_test, y_pred)
    classification_reports[name] = classification_report(y_test, y_pred)
```

```{python}
for name, model in models.items():
    pkl_filename = f"products/pickle_files/{name}.pkl"
    # open pickle file
    with open(pkl_filename, 'rb') as infile:
        obj = pickle.load(infile)

    # convert pickle object to json object
    json_obj = json.loads(json.dumps(obj, default=str))
    json_filename = f"products/json_files/{name}.json"
    # write the json file
    with open(
            json_filename,
            'w',
            encoding='utf-8'
        ) as outfile:
        json.dump(json_obj, outfile, ensure_ascii=False, indent=4)

# delete all pickle files for smooth git push

for name, model in models.items():
    pkl_filename = f"products/pickle_files/{name}.pkl"
    os.remove(pkl_filename)
```

```{python}
fig = px.box(classifmod, x="Model", y="Accuracy", color="Model", points='all',
             labels={"Model": "Machine Learning Model",
                     "Accuracy": "Accuracy"},
             title="Model Accuracy Performance")
fig.show()
fig.write_html("products/plots/model_train_accuracies.html")
```

```{python}
results['Model'] = names
results['Accuracy'] = accuracies
results['Weighted F1'] = weighted_f1s

classifmod = pd.DataFrame(results)

fig = px.box(classifmod, x="Model", y="Weighted_F1", color="Model", points='all',
             labels={"Model": "Machine Learning Model",
                     "Weighted_F1": "Weighted f1-Score"},
             title="Model Weighted f1-Score Performance")
fig.show()
fig.write_html("products/plots/model_train_weighted_f1.html")
```

```{python}
# Plot confusion matrices
for name, matrix in confusion_matrices.items():
    plt.figure(figsize=(5, 5))
    sns.heatmap(matrix, annot=True, fmt="d", cmap="YlGnBu", cbar=False,
                xticklabels=["Extras", "Dot", "Runs", "Wicket"],
                yticklabels=["Extras", "Dot", "Runs", "Wicket"])
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title(f"Confusion Matrix - {name}")
    plt.savefig(f"products/plots/confusion_matrix_{name}.png")
    plt.show()
```

```{python}
from sklearn.metrics import accuracy_score, f1_score
from lightgbm import LGBMClassifier
LGBM = LGBMClassifier()

LGBM.fit(X_train, y_train)

y_pred = LGBM.predict(X_test)

print('Accuracy Score: ', accuracy_score(y_test, y_pred))

print('Weighted F1 Score: ', f1_score(y_test, y_pred, average='weighted'))

print('Classification Report: \n', classification_report(y_test, y_pred))

print('Confusion Matrix: \n', confusion_matrix(y_test, y_pred))
```

